/// Common definitions for querying tabular data
module common.tabular
{

import common.strings.StringNE;

type FieldName = StringNE;

struct FieldEquals { FieldName field; String value; };
struct FieldLike { FieldNameOrFunction field; String pattern; Bool caseSensitive = true; };
struct FieldIn { FieldName field; Vector<String> values; };
struct FieldIsNull { FieldName field; };
struct FieldComparison { FieldName field; ValueOrFunction value; };

union FieldPredicate {
  /// A simple equality check that makes string comparisions
  FieldEquals equals;
  FieldLike like;
  FieldIn in;
  FieldIsNull isnull;
  Vector<FieldPredicate> and;
  Vector<FieldPredicate> or;
  FieldPredicate not;
  FieldComparison greaterThan;
  FieldComparison lessThan;
  /// Equality check based on the ValueOrFunction type provided
  /// TODO(Barry): Replace any usages of equals with this one
  FieldComparison equalTo;
  Bool literal;
};

union ValueOrFunction {
  String value;
  Int32 intValue;
  Void currentDate;
};

// A field or a string literal (e.g. a space) within a concatenation list
union ConcatArgument {
  FieldName name;
  String literal;
};

union FieldNameOrFunction {
  FieldName name;
  Vector<ConcatArgument> concat;
};

union SortDirection {
  Void ascending;
  Void descending;
};

struct SortField { FieldName field; SortDirection direction; };


// A view of a table
struct TableView
{
    // The columns to show
    Vector<FieldName> columns;

    // A filter controlling which rows to show
    FieldPredicate filter = {"literal":true};

    // How the results should be sorted
    Vector<SortField> sorting = [];
};

// The structure we pass to specify a page of values to be
// loaded.
struct TableQuery {
  // By default we match all rows
  FieldPredicate filter = {"literal":true};

  // Sorting order
  Vector<SortField> sorting = [];

  // Pagination offset
  Int32 offset = 0;

  // Number of items to return (-1 => all)
  Int32 count = -1;
};

// A trivial single element struct, to enable non-struct
// values to be shown in tables
struct SingleField<T> {
   T value;
};

};
